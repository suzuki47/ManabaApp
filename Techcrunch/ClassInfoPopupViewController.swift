//
//  ClassInfoPopupViewController.swift
//  Ritsumeikan
//
//  Created by Èà¥Êú®ÊÇ†Â§™ on 2024/03/07.
//

import UIKit
import CoreData

protocol ClassInfoPopupDelegate: AnyObject {
    func classInfoDidUpdate(_ updatedClassInfo: ClassData)
    func classInfoPopupDidClose()
}

class ClassInfoPopupViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout, UICollectionViewDelegate, UITableViewDelegate, UITableViewDataSource {
    weak var delegate: ClassInfoPopupDelegate?
    var classInfo: ClassData?
    var classDataManager: ClassDataManager!
    private var tableView: UITableView!
    private let contentView = UIView()
    private let titleLabel = UILabel()
    private let classNameLabel = UILabel()
    private let classRoomLabel = UILabel()
    private let professorNameLabel = UILabel()
    //private let closeButton = UIButton()
    private let urlButton = UIButton()
    private let editButton = UIButton()
    private let alarmSwitch = UISwitch()
    private var collectionView: UICollectionView!
    
    // CoreData„ÅÆ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà
    var managedObjectContext: NSManagedObjectContext?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupLayout()
        setupEditButton()
        setupAlarmSwitch()  // „Çπ„Ç§„ÉÉ„ÉÅ„ÅÆ„É¨„Ç§„Ç¢„Ç¶„ÉàË®≠ÂÆö
        setupTableView()
        /*
        // „Çø„ÉÉ„Éó„Ç∏„Çß„Çπ„ÉÅ„É£„Çí„Éì„É•„Éº„Å´ËøΩÂä†
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(viewTapped))
        view.addGestureRecognizer(tapGesture)
        */
        // „Çø„ÉÉ„Éó„Ç∏„Çß„Çπ„ÉÅ„É£„Çí„Éì„É•„Éº„Å´ËøΩÂä†
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(viewTapped))
        tapGesture.cancelsTouchesInView = false
        view.addGestureRecognizer(tapGesture)
        
        // CoreData„ÅÆ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„ÇíÂèñÂæó
        if let appDelegate = UIApplication.shared.delegate as? AppDelegate {
            managedObjectContext = appDelegate.persistentContainer.viewContext
        }
        
        collectionView.delegate = self
        collectionView.dataSource = self
        tableView.delegate = self
        tableView.dataSource = self
    }
    
    @objc private func viewTapped(gesture: UITapGestureRecognizer) {
        // „Çø„ÉÉ„Éó„Åï„Çå„Åü‰ΩçÁΩÆ„ÇíÂèñÂæó
        let location = gesture.location(in: view)
        
        // „Çø„ÉÉ„Éó„Åï„Çå„Åü‰ΩçÁΩÆ„ÅåcontentView„ÅÆÂ§ñÂÅ¥„Åß„ÅÇ„Çã„ÅãÂà§ÂÆö
        if !contentView.frame.contains(location) {
            // Â§ñÂÅ¥„Åß„ÅÇ„Çå„Å∞„Éù„ÉÉ„Éó„Ç¢„ÉÉ„Éó„ÇíÈñâ„Åò„Çã
            closePopup()
        }
    }
    
    private func setupLayout() {
        view.backgroundColor = UIColor.black.withAlphaComponent(0.5)
        
        contentView.backgroundColor = .white
        contentView.layer.cornerRadius = 12
        contentView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(contentView)
        
        let titleText = "ÈÅ∏Êäû„Åó„ÅüÊéàÊ•≠"
        let titleAttributedString = NSMutableAttributedString(string: titleText)
        titleAttributedString.addAttributes([.font: UIFont.boldSystemFont(ofSize: titleLabel.font.pointSize)], range: NSRange(location: 0, length: titleText.count))
        titleLabel.attributedText = titleAttributedString
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(titleLabel)
        
        let classInfoName = classInfo?.name ?? ""
        let pattern = "\\d{5}:"
        let truncatedClassInfoName = classInfoName.replacingOccurrences(of: pattern, with: "", options: .regularExpression)
        let classNameText = "üéìÊïôÁßëÂêç\n\(truncatedClassInfoName)"
        let classNameAttributedString = NSMutableAttributedString(string: classNameText)
        let classNameRange = (classNameText as NSString).range(of: "ÊïôÁßëÂêç")
        classNameAttributedString.addAttributes([.font: UIFont.boldSystemFont(ofSize: classNameLabel.font.pointSize)], range: classNameRange)
        classNameLabel.attributedText = classNameAttributedString
        classNameLabel.numberOfLines = 0
        classNameLabel.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(classNameLabel)
        /*
        let classRoomText = "üî∂ÊôÇÈñì„ÉªÊïôÂÆ§\n\(classInfo?.room ?? "")"
        let classRoomAttributedString = NSMutableAttributedString(string: classRoomText)
        let classRoomRange = (classRoomText as NSString).range(of: "ÊôÇÈñì„ÉªÊïôÂÆ§")
        classRoomAttributedString.addAttributes([.font: UIFont.boldSystemFont(ofSize: classRoomLabel.font.pointSize)], range: classRoomRange)
        classRoomLabel.attributedText = classRoomAttributedString
        classRoomLabel.numberOfLines = 0
        classRoomLabel.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(classRoomLabel)
        */
        let professorNameText = "üë§ÊãÖÂΩìÊïôÊéàÂêç\n\(classInfo?.professorName ?? "")"
        let professorNameAttributedString = NSMutableAttributedString(string: professorNameText)
        let professorNameRange = (professorNameText as NSString).range(of: "ÊãÖÂΩìÊïôÊéàÂêç")
        professorNameAttributedString.addAttributes([.font: UIFont.boldSystemFont(ofSize: professorNameLabel.font.pointSize)], range: professorNameRange)
        professorNameLabel.attributedText = professorNameAttributedString
        professorNameLabel.numberOfLines = 0
        professorNameLabel.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(professorNameLabel)
        /*
        closeButton.setTitle("√ó", for: .normal)
        closeButton.backgroundColor = .lightGray
        closeButton.layer.cornerRadius = 5
        closeButton.translatesAutoresizingMaskIntoConstraints = false
        closeButton.addTarget(self, action: #selector(closePopup), for: .touchUpInside)
        contentView.addSubview(closeButton)
         */
        // URL„Éú„Çø„É≥„ÅÆË®≠ÂÆö
        urlButton.setTitle("ÊéàÊ•≠„Éö„Éº„Ç∏‚á®", for: .normal)
        urlButton.backgroundColor = .clear // ËÉåÊôØËâ≤„Çí„ÇØ„É™„Ç¢„Å´Ë®≠ÂÆö
        urlButton.layer.cornerRadius = 0 // Ëßí„ÅÆ‰∏∏„Åø„ÇíÂèñ„ÇäÈô§„Åè
        urlButton.layer.borderWidth = 0 // Êû†Á∑ö„ÇíÂèñ„ÇäÈô§„Åè
        urlButton.setTitleColor(.black, for: .normal) // „Çø„Ç§„Éà„É´„ÅÆËâ≤„ÇíË®≠ÂÆö
        urlButton.titleLabel?.font = UIFont.systemFont(ofSize: 16) // „Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫„ÇíË®≠ÂÆö
        urlButton.translatesAutoresizingMaskIntoConstraints = false
        urlButton.addTarget(self, action: #selector(openURL), for: .touchUpInside)
        contentView.addSubview(urlButton)

        alarmSwitch.translatesAutoresizingMaskIntoConstraints = false
        alarmSwitch.addTarget(self, action: #selector(alarmSwitchChanged), for: .valueChanged)
        contentView.addSubview(alarmSwitch)
        
        setupCollectionView()
        setupToggleButton()
        setupTableView()
        
        setupConstraints()
    }
    
    private func setupTableView() {
        tableView = UITableView()
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: "TableViewCell")
        tableView.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(tableView)
        
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: professorNameLabel.bottomAnchor, constant: 20),
            tableView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            tableView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            tableView.heightAnchor.constraint(equalToConstant: 100)  // È´ò„Åï„ÅØÈÅ©ÂÆúË™øÊï¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ
        ])
    }
    
    // MARK: - UITableViewDataSource

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return classDataManager.classList.filter { $0.classId == classInfo?.classId }.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "TableViewCell", for: indexPath)
        let classRooms = classDataManager.classList.filter { $0.classId == classInfo?.classId }.map { $0.room }
        cell.textLabel?.text = classRooms[indexPath.row]
        return cell
    }

    private func setupEditButton() {
        guard classInfo?.classIdChangeable == true else { return } // classIdChangeable„Ååtrue„ÅÆÂ†¥Âêà„Å´„ÅÆ„ÅøÁ∑®ÈõÜ„Éú„Çø„É≥„ÇíË°®Á§∫

        editButton.setTitle("Á∑®ÈõÜ", for: .normal)
        editButton.backgroundColor = .blue
        editButton.layer.cornerRadius = 5
        editButton.translatesAutoresizingMaskIntoConstraints = false
        editButton.addTarget(self, action: #selector(editClassInfo), for: .touchUpInside)
        contentView.addSubview(editButton)

        NSLayoutConstraint.activate([
            editButton.bottomAnchor.constraint(equalTo: urlButton.topAnchor, constant: 45),
            editButton.centerXAnchor.constraint(equalTo: contentView.centerXAnchor, constant: -25),
            editButton.widthAnchor.constraint(equalToConstant: 100),
            editButton.heightAnchor.constraint(equalToConstant: 40),
        ])
    }

    private func setupConstraints() {
        NSLayoutConstraint.activate([
            contentView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            contentView.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            contentView.widthAnchor.constraint(equalToConstant: 300),
            contentView.heightAnchor.constraint(equalToConstant: 620),
            
            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 20),
            titleLabel.centerXAnchor.constraint(equalTo: contentView.centerXAnchor),
            titleLabel.leadingAnchor.constraint(greaterThanOrEqualTo: contentView.leadingAnchor, constant: 20),
            titleLabel.trailingAnchor.constraint(lessThanOrEqualTo: contentView.trailingAnchor, constant: -20),
            
            classNameLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 20),
            classNameLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            classNameLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            
            professorNameLabel.topAnchor.constraint(equalTo: classNameLabel.bottomAnchor, constant: 20),
            professorNameLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            professorNameLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            
            tableView.topAnchor.constraint(equalTo: professorNameLabel.bottomAnchor, constant: 20),
            tableView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            tableView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            tableView.heightAnchor.constraint(equalToConstant: 100), // È´ò„Åï„ÇíË™øÊï¥
            
            alarmSwitch.topAnchor.constraint(equalTo: tableView.bottomAnchor, constant: 20),
            alarmSwitch.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            
            collectionView.topAnchor.constraint(equalTo: alarmSwitch.bottomAnchor, constant: 20),
            collectionView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            collectionView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            collectionViewHeightConstraint,
            /*
            closeButton.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -30),
            closeButton.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            closeButton.widthAnchor.constraint(equalToConstant: 50),
            closeButton.heightAnchor.constraint(equalToConstant: 50),
            */
            urlButton.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -30),
            urlButton.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            urlButton.widthAnchor.constraint(equalToConstant: 100),
            urlButton.heightAnchor.constraint(equalToConstant: 50)
        ])
    }
    private var collectionViewHeightConstraint: NSLayoutConstraint!

    private func setupCollectionView() {
        let layout = UICollectionViewFlowLayout()
        layout.minimumInteritemSpacing = 1
        layout.minimumLineSpacing = 1

        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: "Cell")
        collectionView.backgroundColor = .white
        
        //„Çª„É´„ÅÆ„ÇØ„É™„ÉÉ„ÇØ„ÇíÂèçÂøú„Åï„Åõ„Çã„Åü„ÇÅ„ÅÆË©¶Ë°åÈåØË™§
        collectionView.isUserInteractionEnabled = true
        collectionView.allowsSelection = true
        
        //collectionView.backgroundColor = .red // ‰∏ÄÊôÇÁöÑ„Å´ËÉåÊôØËâ≤„ÇíË®≠ÂÆö
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(collectionView)
        
        collectionViewHeightConstraint = collectionView.heightAnchor.constraint(equalToConstant: 260) // ÂàùÊúüÈ´ò„Åï„ÇíË®≠ÂÆö
        collectionViewHeightConstraint.isActive = true
        
        NSLayoutConstraint.activate([
            collectionView.topAnchor.constraint(equalTo: alarmSwitch.bottomAnchor, constant: 20), // „Çπ„Ç§„ÉÉ„ÉÅ„ÅÆ‰∏ã„Å´ÈÖçÁΩÆ
            collectionView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            collectionView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20)
        ])
    }

    private let toggleButton = UIButton()

    private func setupToggleButton() {
        toggleButton.setTitle("üîΩ", for: .normal)
        toggleButton.addTarget(self, action: #selector(toggleCollectionView), for: .touchUpInside)
        toggleButton.translatesAutoresizingMaskIntoConstraints = false
        contentView.addSubview(toggleButton)
        
        NSLayoutConstraint.activate([
            toggleButton.topAnchor.constraint(equalTo: collectionView.topAnchor, constant: -30), // Âõ∫ÂÆö‰ΩçÁΩÆ
            toggleButton.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -10), // Âõ∫ÂÆö‰ΩçÁΩÆ
            toggleButton.widthAnchor.constraint(equalToConstant: 30),
            toggleButton.heightAnchor.constraint(equalToConstant: 30)
        ])
    }

    @objc private func toggleCollectionView() {
        let isExpanded = collectionViewHeightConstraint.constant > 0
        collectionViewHeightConstraint.constant = isExpanded ? 0 : 260
        
        UIView.animate(withDuration: 0.3) {
            self.view.layoutIfNeeded()
        }
    }
    
    private func setupAlarmSwitch() {
        // Êó¢Â≠ò„ÅÆÊÉÖÂ†±„Åã„Çâ„Çπ„Ç§„ÉÉ„ÉÅ„ÅÆÁä∂ÊÖã„ÇíË®≠ÂÆö
        alarmSwitch.isOn = classInfo?.isNotifying ?? false
    }
    
    @objc private func alarmSwitchChanged() {
        print("ÈÄöÁü•„Çπ„Ç§„ÉÉ„ÉÅ„ÅåÂ§âÊõ¥„Åï„Çå„Åæ„Åó„Åü")
        // „Çπ„Ç§„ÉÉ„ÉÅ„ÅÆÁä∂ÊÖã„ÅåÂ§â„Çè„Å£„ÅüÊôÇ„ÅÆÂá¶ÁêÜ
        classInfo?.isNotifying = alarmSwitch.isOn
        
        // CoreData„ÅÆÊõ¥Êñ∞
        updateCoreDataNotificationStatus()
        
        // ÈÄöÁü•„ÅÆÂâäÈô§
        if alarmSwitch.isOn == false {
            removeNotification(for: classInfo?.name)
        }
        
        // ÂøÖË¶Å„Å™„Çâ„Éá„É™„Ç≤„Éº„Éà„ÇÑÈÄöÁü•„ÇíÈÄö„Åò„Å¶Â§âÊõ¥„ÇíÈÄöÁü•
        if let updatedClassInfo = classInfo {
            delegate?.classInfoDidUpdate(updatedClassInfo)
        }
    }

    private func updateCoreDataNotificationStatus() {
        //print("‰ªä„Åã„ÇâÈÄöÁü•„ÅÆ„Ç™„É≥„Ç™„Éï„Çí‰øùÂ≠ò„Åó„Åæ„Åô")
        guard let context = managedObjectContext, let classInfo = classInfo else { return }
        print("‰ªä„Åã„ÇâÈÄöÁü•„ÅÆ„Ç™„É≥„Ç™„Éï„Çí‰øùÂ≠ò„Åó„Åæ„Åô")
        // classInfo „ÅÆ‰∏≠Ë∫´„ÇíÁ¢∫Ë™ç
        print("ClassInfo - dayAndPeriod: \(classInfo.dayAndPeriod), isNotifying: \(classInfo.isNotifying), „Åù„ÅÆ‰ªñ„ÅÆÊÉÖÂ†±: \(classInfo)")
        // „Éï„Çß„ÉÉ„ÉÅ„É™„ÇØ„Ç®„Çπ„Éà„Çí‰ΩúÊàê„Åó„Å¶Ë©≤ÂΩì„ÅÆ„ÇØ„É©„ÇπÊÉÖÂ†±„ÇíÂèñÂæó
        let fetchRequest: NSFetchRequest<MyClassDataStore> = MyClassDataStore.fetchRequest()
        fetchRequest.predicate = NSPredicate(format: "classId == %lld", classInfo.classId)

        do {
            let results = try context.fetch(fetchRequest)
            if let myClassData = results.first {
                myClassData.isNotifying = classInfo.isNotifying
                
                // Â§âÊõ¥„Çí‰øùÂ≠ò
                try context.save()
                print("isNotifying‰øùÂ≠ò„Åó„Åü„Çà")
                printCoreDataClassData()
            }
        } catch {
            print("Failed to update CoreData: \(error)")
        }
    }
    
    private func removeNotification(for className: String?) {
        guard let className = className else { return }
        
        let center = UNUserNotificationCenter.current()
        center.getPendingNotificationRequests { requests in
            let identifiersToRemove = requests.filter { $0.content.title == className }.map { $0.identifier }
            
            center.removePendingNotificationRequests(withIdentifiers: identifiersToRemove)
            print("ÈÄöÁü•„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü: \(identifiersToRemove)")
            
            // ÂâäÈô§Âæå„ÅÆÈÄöÁü•„É™„Çπ„Éà„ÇíË°®Á§∫„Åó„Å¶Á¢∫Ë™ç
            self.printPendingNotifications()
        }
    }
    
    private func printPendingNotifications() {
        let center = UNUserNotificationCenter.current()
        center.getPendingNotificationRequests { requests in
            print("Pending notifications after deletion:")
            for request in requests {
                print("Notification ID: \(request.identifier), Title: \(request.content.title)")
            }
        }
        center.getDeliveredNotifications { notifications in
            print("Delivered notifications after deletion:")
            for notification in notifications {
                print("Notification ID: \(notification.request.identifier), Title: \(notification.request.content.title)")
            }
        }
    }
    
    func getRoomInfo(from dayAndPeriod: Int) -> String {
        let days = ["Êúà", "ÁÅ´", "Ê∞¥", "Êú®", "Èáë", "Âúü", "Êó•"]
        let period = dayAndPeriod / 7 + 1
        let dayIndex = dayAndPeriod % 7
        let day = days[dayIndex]
        return "\(day)\(period):ÊïôÂÆ§Âêç"
    }
    
    func printCoreDataClassData() {
        let fetchRequest: NSFetchRequest<MyClassDataStore> = MyClassDataStore.fetchRequest()
        
        do {
            let classes = try managedObjectContext?.fetch(fetchRequest) ?? []
            for classData in classes {
                print("CoreData Class ID: \(classData.dayAndPeriod)")
                print("CoreData Class Title: \(classData.classTitle ?? "")")
                //print("CoreData Class Room: \(classData.classRoom ?? "")")
                //print("CoreData Professor Name: \(classData.professorName ?? "")")
                //print("CoreData Class URL: \(classData.classURL ?? "")")
                print("CoreData Class ID Changeable: \(classData.classIdChangeable)")
                print("CoreData Is Notifying: \(classData.isNotifying)")
            }
        } catch {
            print("Failed to fetch classes from CoreData: \(error)")
        }
    }
    
    @objc private func editClassInfo() {
        // Á∑®ÈõÜÁî®„ÅÆ„Ç¢„É©„Éº„Éà„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÇíË°®Á§∫
        let alertController = UIAlertController(title: "ÊéàÊ•≠ÊÉÖÂ†±„ÅÆÁ∑®ÈõÜ", message: nil, preferredStyle: .alert)
        alertController.addTextField { textField in
            textField.text = self.classInfo?.room
            textField.placeholder = "Â†¥ÊâÄ"
        }
        alertController.addTextField { textField in
            textField.text = "" // ÊôÇÈñì(ID)„ÇíÁõ¥Êé•Á∑®ÈõÜ„Åô„Çã„ÅÆ„Åß„ÅØ„Å™„Åè„ÄÅ‰æã„Åà„Å∞„ÄåÊúà1„Äç„Å®„ÅÑ„Å£„ÅüÂΩ¢Âºè„ÅßÂÖ•Âäõ„ÇíÂèó„Åë‰ªò„Åë„Çã
            textField.placeholder = "ÊôÇÈñìÔºà‰æãÔºöÊúà2Ôºâ"
        }

        let saveAction = UIAlertAction(title: "‰øùÂ≠ò", style: .default) { _ in
            let roomText = alertController.textFields?.first?.text ?? ""
            let timeText = alertController.textFields?.last?.text ?? ""

            // „Åì„Åì„ÅßclassInfo„ÇíÊõ¥Êñ∞„Åô„ÇãÂá¶ÁêÜ„ÇíË®òËø∞
            self.classInfo?.room = roomText
            
            // ÊôÇÈñì(ID)„ÅÆÊõ¥Êñ∞Âá¶ÁêÜ
            let timeId = self.convertTimeToId(time: timeText)
            // „Åì„ÅÆ‰æã„Åß„ÅØclassInfo„Å´Áõ¥Êé•ID„Çí‰øùÂ≠ò„Åô„Çã„Éó„É≠„Éë„ÉÜ„Ç£„Åå„ÅÇ„Çã„Å®‰ªÆÂÆö„Åó„Å¶„ÅÑ„Åæ„Åô
            // ÂÆüÈöõ„ÅÆ„Éó„É≠„Éë„ÉÜ„Ç£Âêç„Å´Âêà„Çè„Åõ„Å¶„Åè„Å†„Åï„ÅÑ
            self.classInfo?.dayAndPeriod = timeId
            
            // Êõ¥Êñ∞Âæå„ÅÆÊÉÖÂ†±„ÅßUI„ÇíÊõ¥Êñ∞„Åô„ÇãÂá¶ÁêÜ„Çí„Åì„Åì„Å´ËøΩÂä†
            self.updateUIWithClassInfo()
            
            // Êõ¥Êñ∞„Åï„Çå„ÅüclassInfo„ÅÆÂÜÖÂÆπ„Çí„É≠„Ç∞„Å´Âá∫Âäõ
            if let updatedClassInfo = self.classInfo {
                print("Êõ¥Êñ∞„Åï„Çå„ÅüÊéàÊ•≠ÊÉÖÂ†±Ôºö")
                print("ID: \(updatedClassInfo.dayAndPeriod), ÊïôÂÆ§: \(updatedClassInfo.room)")
                // „Åì„Åì„Åß„Éá„É™„Ç≤„Éº„Éà„É°„ÇΩ„ÉÉ„Éâ„ÇíÂëº„Å≥Âá∫„Åó
                self.delegate?.classInfoDidUpdate(updatedClassInfo)
            }
        }

        alertController.addAction(saveAction)
        alertController.addAction(UIAlertAction(title: "„Ç≠„É£„É≥„Çª„É´", style: .cancel, handler: nil))
        present(alertController, animated: true, completion: nil)
    }
    
    func convertTimeToId(time: String) -> Int {
        // ÊõúÊó•„Å®ÊôÇÈôê„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞
        let dayToOffset: [String: Int] = ["Êúà": 0, "ÁÅ´": 1, "Ê∞¥": 2, "Êú®": 3, "Èáë": 4, "Âúü": 5, "Êó•": 6]
        let periodToOffset: [Int] = [0, 7, 14, 21, 28, 35, 42]

        // ÂÖ•Âäõ„Åï„Çå„ÅüÊôÇÈñì„Åã„ÇâÊõúÊó•„Å®ÊôÇÈôê„ÇíÊäΩÂá∫
        let dayIndex = dayToOffset[String(time.prefix(1))] ?? 0
        let periodIndex = Int(String(time.suffix(1))) ?? 1

        // ID„ÇíË®àÁÆó
        let id = periodToOffset[periodIndex - 1] + dayIndex
        return id
    }

    private func updateUIWithClassInfo() {
        if let classInfo = classInfo {
            classNameLabel.text = "ÊïôÁßëÂêç\n\(classInfo.name)"
            classRoomLabel.text = "ÊôÇÈñì„ÉªÊïôÂÆ§\n\(classInfo.room)"
            professorNameLabel.text = "ÊãÖÂΩìÊïôÊéàÂêç\n\(classInfo.professorName)"
            alarmSwitch.isOn = classInfo.isNotifying  // „Çπ„Ç§„ÉÉ„ÉÅ„ÅÆÁä∂ÊÖã„ÇíÊõ¥Êñ∞
            // „Åù„ÅÆ‰ªñ„ÅÆUIË¶ÅÁ¥†„Åå„ÅÇ„Çå„Å∞„Åì„Åì„ÅßÊõ¥Êñ∞
        }
    }

    @objc private func closePopup() {
        delegate?.classInfoPopupDidClose()
        dismiss(animated: true, completion: nil)
    }
    
    @objc private func openURL() {
        // „Éô„Éº„ÇπURL
        let baseURLString = "https://ct.ritsumei.ac.jp/ct/"
        // classInfo„Åã„ÇâÂèñÂæó„Åó„ÅüURL„Éë„Çπ
        if let urlPath = classInfo?.url, let url = URL(string: baseURLString + urlPath) {
            UIApplication.shared.open(url)
        }
    }
 
    // MARK: - UICollectionViewDataSource

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 8 * 8 // 8x8 „ÅÆ„Çª„É´Êï∞
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "Cell", for: indexPath)
        cell.backgroundColor = UIColor(red: 0.8, green: 0.8, blue: 0.8, alpha: 1.0)

        // „É©„Éô„É´„ÅåÊó¢„Å´Â≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅØÂâäÈô§
        for subview in cell.contentView.subviews {
            subview.removeFromSuperview()
        }

        let label = UILabel(frame: cell.contentView.bounds)
        label.textAlignment = .center

        // 1Ë°åÁõÆ„Å´ÊõúÊó•„ÇíË°®Á§∫
        if indexPath.item >= 1 && indexPath.item <= 7 {
            let weekdays = ["Êúà", "ÁÅ´", "Ê∞¥", "Êú®", "Èáë", "Âúü", "Êó•"]
            label.text = weekdays[indexPath.item - 1]
        }
        // 1ÂàóÁõÆ„Å´Êï∞Â≠ó„ÇíË°®Á§∫
        else if indexPath.item % 8 == 0 && indexPath.item != 0 {
            let rowNumber = indexPath.item / 8
            label.text = "\(rowNumber)"
        }

        // ÊéàÊ•≠„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅØÁ∑ëËâ≤„Å´Â§âÊõ¥
        if let classDataManager = classDataManager {
            for classData in classDataManager.classList {
                let row = classData.dayAndPeriod / 7 + 1
                let column = classData.dayAndPeriod % 7 + 1
                let itemIndex = row * 8 + column
                
                if indexPath.item == itemIndex {
                    cell.backgroundColor = .green
                    break
                }
            }
        }

        cell.contentView.addSubview(label)
        return cell
    }

    // MARK: - UICollectionViewDelegateFlowLayout

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let side = (collectionView.bounds.width - (7 * 1)) / 8 // „Çª„É´„ÅÆÂπÖ„ÇíË®àÁÆó
        return CGSize(width: side, height: side)
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        // 1Ë°åÁõÆ„ÄÅ1ÂàóÁõÆ„ÄÅÁ∑ë„ÅÆ„Çª„É´„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„ÅüÂ†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑ
        print("didSelectItemAt„ÅåÂëº„Å≥Âá∫„Åï„Çå„Åæ„Åó„Åü„ÄÇ")
        if indexPath.item <= 7 || indexPath.item % 8 == 0 {
            return
        }
        /*
        if let cell = collectionView.cellForItem(at: indexPath), cell.backgroundColor == .green {
            return
        }
         */
        // „Çª„É´„ÅåÁ∑ë„Åß„ÅÇ„Å£„Å¶„ÇÇclassIdChangeable„Ååtrue„ÅÆÂ†¥Âêà„ÅØ„Éá„Éº„Çø„ÇíÂâäÈô§„Åô„Çã
        if let cell = collectionView.cellForItem(at: indexPath), cell.backgroundColor == .green {
            // ÂØæÂøú„Åô„Çã„Éá„Éº„Çø„ÇíÂèñÂæó
            let row = indexPath.item / 8
            let column = indexPath.item % 8
            let dayAndPeriod = (row - 1) * 7 + (column - 1)
            
            // Ë©≤ÂΩì„Åô„Çã„Éá„Éº„Çø„ÇíÊ§úÁ¥¢
            if let index = classDataManager.classList.firstIndex(where: { $0.dayAndPeriod == dayAndPeriod && $0.classIdChangeable }) {
                // „Éá„Éº„Çø„ÇíÂâäÈô§
                classDataManager.classList.remove(at: index)
                print("dayAndPeriod„Åå\(dayAndPeriod)„ÅÆ„Éá„Éº„Çø„ÅåÂâäÈô§„Åï„Çå„Åæ„Åó„Åü")
                // classDataManager.classList„Çí„ÇΩ„Éº„Éà
                classDataManager.classList.sort(by: { $0.dayAndPeriod < $1.dayAndPeriod })
                collectionView.reloadData()
                // CoreData„Å´ÂèçÊò†
                classDataManager.deleteClassDataFromDB(dayAndPeriod: dayAndPeriod)
                return
            }
        }

        // „ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„Åü„Çª„É´„ÅÆÊñ∞„Åó„ÅÑdayAndPeriod„ÇíË®àÁÆó
        let row = indexPath.item / 8
        let column = indexPath.item % 8
        let newDayAndPeriod = (row - 1) * 7 + (column - 1)
        print("Êñ∞„Åü„Å™dayAndPeriod:\(newDayAndPeriod)")

        // Ë§áË£Ω„Åô„Çã„Éá„Éº„Çø„ÇíÈÅ∏Êäû
        guard let classInfo = classInfo else { return }
        let roomInfo = getRoomInfo(from: newDayAndPeriod)
        let newClassData = ClassData(
            classId: classInfo.classId, // Ë≠òÂà•Â≠ê„ÅØÊñ∞„Åó„ÅÑ„ÇØ„É©„Çπ„Éá„Éº„Çø„Çí‰Ωú„ÇãÈöõ„Å´„ÅØÂ§âÊõ¥„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„Åã„ÇÇ„Åó„Çå„Åæ„Åõ„Çì
            dayAndPeriod: newDayAndPeriod,
            name: classInfo.name,
            room: roomInfo,
            url: classInfo.url,
            professorName: classInfo.professorName,
            classIdChangeable: classInfo.classIdChangeable,
            isNotifying: classInfo.isNotifying
        )

        // classDataManager.classList„Å´ËøΩÂä†
        classDataManager.classList.append(newClassData)
        // classDataManager.classList„Çí„ÇΩ„Éº„Éà
        classDataManager.classList.sort(by: { $0.dayAndPeriod < $1.dayAndPeriod })
        collectionView.reloadData()
        // CoreData„Å´ÂèçÊò†
        classDataManager.replaceClassDataIntoDB(classInformationList: classDataManager.classList)
    }
}
